// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:xfiat_fluttify/src/ios/ios.export.g.dart';
import 'package:xfiat_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

class com_iflytek_msc_MetaVAD_Instance extends java_lang_Object  {
  //region constants
  
  //endregion

  //region creators
  static Future<com_iflytek_msc_MetaVAD_Instance> create__() async {
    final int refId = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('ObjectFactory::createcom_iflytek_msc_MetaVAD_Instance__');
    final object = com_iflytek_msc_MetaVAD_Instance()..refId = refId..tag = 'xfiat_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  //endregion

  //region getters
  Future<int> get_handle() async {
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod("com.iflytek.msc.MetaVAD.Instance::get_handle", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_rate() async {
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod("com.iflytek.msc.MetaVAD.Instance::get_rate", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_begin() async {
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod("com.iflytek.msc.MetaVAD.Instance::get_begin", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_end() async {
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod("com.iflytek.msc.MetaVAD.Instance::get_end", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_seg() async {
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod("com.iflytek.msc.MetaVAD.Instance::get_seg", {'refId': refId});
  
    return result;
  }
  
  Future<int> get_volume() async {
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod("com.iflytek.msc.MetaVAD.Instance::get_volume", {'refId': refId});
  
    return result;
  }
  
  //endregion

  //region setters
  Future<void> set_handle(int handle) async {
    await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('com.iflytek.msc.MetaVAD.Instance::set_handle', {'refId': refId, "handle": handle});
  
  
  }
  
  Future<void> set_rate(int rate) async {
    await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('com.iflytek.msc.MetaVAD.Instance::set_rate', {'refId': refId, "rate": rate});
  
  
  }
  
  Future<void> set_begin(int begin) async {
    await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('com.iflytek.msc.MetaVAD.Instance::set_begin', {'refId': refId, "begin": begin});
  
  
  }
  
  Future<void> set_end(int end) async {
    await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('com.iflytek.msc.MetaVAD.Instance::set_end', {'refId': refId, "end": end});
  
  
  }
  
  Future<void> set_seg(int seg) async {
    await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('com.iflytek.msc.MetaVAD.Instance::set_seg', {'refId': refId, "seg": seg});
  
  
  }
  
  Future<void> set_volume(int volume) async {
    await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('com.iflytek.msc.MetaVAD.Instance::set_volume', {'refId': refId, "volume": volume});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}