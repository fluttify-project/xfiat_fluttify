// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:xfiat_fluttify/src/ios/ios.export.g.dart';
import 'package:xfiat_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

class com_iflytek_cloud_msc_util_log_PerfLogger extends java_lang_Object  {
  //region constants
  static final String SDK_SESSION_BIGNE = "SDKSessionBegin";
  static final String MSC_SESSION_BIGNE = "MSCSessionBegin";
  static final String SESSION_BEGIN_END = "SessionBeginEnd";
  static final String LAST_DATA_FLAG = "LastDataFlag";
  static final String GET_RESULT = "GetNotifyResult";
  static final String SESSION_END_BEGIN = "SessionEndBegin";
  static final String SESSION_END_END = "SessionEndEnd";
  static final String SENT_REQUEST = "SendRequest";
  static final String REQUEST_RESULT = "RequestResult";
  static final String CREATE_DOWNLOAD = "CreateDownload";
  static final String DOWNLOAD_ONSTART = "DownloadonStart";
  static final String DOWNLOAD_ONFINISH = "DownloadonFinish";
  static final String TYPE_MSC = "msc";
  static final String TYPE_PRE = "pre";
  //endregion

  //region creators
  static Future<com_iflytek_cloud_msc_util_log_PerfLogger> create__() async {
    final int refId = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('ObjectFactory::createcom_iflytek_cloud_msc_util_log_PerfLogger__');
    final object = com_iflytek_cloud_msc_util_log_PerfLogger()..refId = refId..tag = 'xfiat_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  static Future<void> setLogSaved(bool var0) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: com.iflytek.cloud.msc.util.log.PerfLogger::setLogSaved([\'var0\':$var0])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('com.iflytek.cloud.msc.util.log.PerfLogger::setLogSaved', {"var0": var0});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> saveLogFile(String var0) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: com.iflytek.cloud.msc.util.log.PerfLogger::saveLogFile([\'var0\':$var0])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('com.iflytek.cloud.msc.util.log.PerfLogger::saveLogFile', {"var0": var0});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> clear() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: com.iflytek.cloud.msc.util.log.PerfLogger::clear([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('com.iflytek.cloud.msc.util.log.PerfLogger::clear', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> appendInfo(String var0, String var1) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: com.iflytek.cloud.msc.util.log.PerfLogger::appendInfo([\'var0\':$var0, \'var1\':$var1])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('com.iflytek.cloud.msc.util.log.PerfLogger::appendInfo', {"var0": var0, "var1": var1});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<void> appendInfoByValue(String var0, String var1) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: com.iflytek.cloud.msc.util.log.PerfLogger::appendInfoByValue([\'var0\':$var0, \'var1\':$var1])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('com.iflytek.cloud.msc.util.log.PerfLogger::appendInfoByValue', {"var0": var0, "var1": var1});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  //endregion
}