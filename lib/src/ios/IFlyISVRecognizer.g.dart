// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:xfiat_fluttify/src/ios/ios.export.g.dart';
import 'package:xfiat_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

class IFlyISVRecognizer extends NSObject  {
  //region constants
  
  //endregion

  //region creators
  static Future<IFlyISVRecognizer> create__() async {
    final int refId = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('ObjectFactory::createIFlyISVRecognizer');
    final object = IFlyISVRecognizer()..refId = refId..tag = 'xfiat_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  Future<void> set_delegate(IFlyISVDelegate delegate) async {
    await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlyISVRecognizer::set_delegate', {'refId': refId, "delegate": delegate.refId});
  
    MethodChannel('IFlyISVDelegate::Callback')
      .setMethodCallHandler((methodCall) async {
        final args = methodCall.arguments as Map;
        // final refId = args['callerRefId'] as int;
        // if (refId != this.refId) return;
  
        switch (methodCall.method) {
          case 'Callback::IFlyISVDelegate::onCompleted':
            // print log
            if (fluttifyLogEnabled) {
              print('fluttify-dart-callback: onCompleted([])');
            }
        
            // handle the native call
            delegate?.onCompleted(IFlySpeechError()..refId = (args['errorCode'])..tag = 'xfiat_fluttify');
            break;
          case 'Callback::IFlyISVDelegate::onRecognition':
            // print log
            if (fluttifyLogEnabled) {
              print('fluttify-dart-callback: onRecognition([])');
            }
        
            // handle the native call
            delegate?.onRecognition();
            break;
          case 'Callback::IFlyISVDelegate::onVolumeChanged':
            // print log
            if (fluttifyLogEnabled) {
              print('fluttify-dart-callback: onVolumeChanged([\'volume\':$args[volume]])');
            }
        
            // handle the native call
            delegate?.onVolumeChanged(args['volume']);
            break;
          default:
            break;
        }
      });
  }
  
  //endregion

  //region methods
  static Future<IFlyISVRecognizer> sharedInstance() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlyISVRecognizer::sharedInstance([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlyISVRecognizer::sharedInstance', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(IFlyISVRecognizer()..refId = result..tag = 'xfiat_fluttify');
      return IFlyISVRecognizer()..refId = result..tag = 'xfiat_fluttify';
    }
  }
  
  Future<String> generatePassword(int length) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlyISVRecognizer@$refId::generatePassword([\'length\':$length])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlyISVRecognizer::generatePassword', {"length": length, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<List> getPasswordList(int pwdt) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlyISVRecognizer@$refId::getPasswordList([\'pwdt\':$pwdt])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlyISVRecognizer::getPasswordList', {"pwdt": pwdt, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.addAll((result as List).cast<int>().map((it) => NSObject()..refId = it..tag = 'xfiat_fluttify').toList());
      return (result as List).cast<int>().map((it) => NSObject()..refId = it..tag = 'xfiat_fluttify').toList();
    }
  }
  
  Future<bool> isListening() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlyISVRecognizer@$refId::isListening([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlyISVRecognizer::isListening', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<bool> setParameterForKey(String value, String key) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlyISVRecognizer@$refId::setParameter([\'value\':$value, \'key\':$key])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlyISVRecognizer::setParameterForKey', {"value": value, "key": key, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<String> getParameter(String key) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlyISVRecognizer@$refId::getParameter([\'key\':$key])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlyISVRecognizer::getParameter', {"key": key, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> startListening() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlyISVRecognizer@$refId::startListening([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlyISVRecognizer::startListening', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> stopListening() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlyISVRecognizer@$refId::stopListening([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlyISVRecognizer::stopListening', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cancel() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlyISVRecognizer@$refId::cancel([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlyISVRecognizer::cancel', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  //endregion
}