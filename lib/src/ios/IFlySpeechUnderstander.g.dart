// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:xfiat_fluttify/src/ios/ios.export.g.dart';
import 'package:xfiat_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

class IFlySpeechUnderstander extends NSObject  {
  //region constants
  
  //endregion

  //region creators
  static Future<IFlySpeechUnderstander> create__() async {
    final int refId = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('ObjectFactory::createIFlySpeechUnderstander');
    final object = IFlySpeechUnderstander()..refId = refId..tag = 'xfiat_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  //endregion

  //region getters
  Future<bool> get_isUnderstanding() async {
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod("IFlySpeechUnderstander::get_isUnderstanding", {'refId': refId});
  
    return result;
  }
  
  Future<IFlySpeechRecognizerDelegate> get_delegate() async {
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod("IFlySpeechUnderstander::get_delegate", {'refId': refId});
    kNativeObjectPool.add(IFlySpeechRecognizer()..refId = result..tag = 'xfiat_fluttify');
    return IFlySpeechRecognizer()..refId = result..tag = 'xfiat_fluttify';
  }
  
  //endregion

  //region setters
  Future<void> set_delegate(IFlySpeechRecognizerDelegate delegate) async {
    await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechUnderstander::set_delegate', {'refId': refId, "delegate": delegate.refId});
  
  
  }
  
  //endregion

  //region methods
  static Future<IFlySpeechUnderstander> sharedInstance() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechUnderstander::sharedInstance([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechUnderstander::sharedInstance', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
      kNativeObjectPool.add(IFlySpeechUnderstander()..refId = result..tag = 'xfiat_fluttify');
      return IFlySpeechUnderstander()..refId = result..tag = 'xfiat_fluttify';
    }
  }
  
  Future<bool> startListening() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechUnderstander@$refId::startListening([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechUnderstander::startListening', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> stopListening() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechUnderstander@$refId::stopListening([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechUnderstander::stopListening', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> cancel() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechUnderstander@$refId::cancel([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechUnderstander::cancel', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<bool> setParameterForKey(String value, String key) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechUnderstander@$refId::setParameter([\'value\':$value, \'key\':$key])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechUnderstander::setParameterForKey', {"value": value, "key": key, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<bool> writeAudio(NSData audioData) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechUnderstander@$refId::writeAudio([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechUnderstander::writeAudio', {"audioData": audioData.refId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<bool> destroy() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechUnderstander@$refId::destroy([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechUnderstander::destroy', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  //endregion
}