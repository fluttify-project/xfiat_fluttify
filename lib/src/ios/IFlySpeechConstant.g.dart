// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:xfiat_fluttify/src/ios/ios.export.g.dart';
import 'package:xfiat_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

class IFlySpeechConstant extends NSObject  {
  //region constants
  
  //endregion

  //region creators
  static Future<IFlySpeechConstant> create__() async {
    final int refId = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('ObjectFactory::createIFlySpeechConstant');
    final object = IFlySpeechConstant()..refId = refId..tag = 'xfiat_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  static Future<String> APPID() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::APPID([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::APPID', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> ACCENT() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::ACCENT([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::ACCENT', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> ACCENT_MANDARIN() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::ACCENT_MANDARIN([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::ACCENT_MANDARIN', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> ACCENT_HENANESE() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::ACCENT_HENANESE([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::ACCENT_HENANESE', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> ACCENT_SICHUANESE() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::ACCENT_SICHUANESE([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::ACCENT_SICHUANESE', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> ACCENT_CANTONESE() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::ACCENT_CANTONESE([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::ACCENT_CANTONESE', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> LANGUAGE() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::LANGUAGE([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::LANGUAGE', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> LANGUAGE_CHINESE() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::LANGUAGE_CHINESE([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::LANGUAGE_CHINESE', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> LANGUAGE_CHINESE_TW() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::LANGUAGE_CHINESE_TW([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::LANGUAGE_CHINESE_TW', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> LANGUAGE_ENGLISH() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::LANGUAGE_ENGLISH([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::LANGUAGE_ENGLISH', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> LANGUAGE_RUSSIAN() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::LANGUAGE_RUSSIAN([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::LANGUAGE_RUSSIAN', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> LANGUAGE_JAPANESE() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::LANGUAGE_JAPANESE([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::LANGUAGE_JAPANESE', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> LANGUAGE_FRENCH() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::LANGUAGE_FRENCH([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::LANGUAGE_FRENCH', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> LANGUAGE_SPANISH() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::LANGUAGE_SPANISH([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::LANGUAGE_SPANISH', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> LANGUAGE_KOREAN() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::LANGUAGE_KOREAN([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::LANGUAGE_KOREAN', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> RESULT_TYPE() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::RESULT_TYPE([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::RESULT_TYPE', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> IFLY_DOMAIN() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::IFLY_DOMAIN([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::IFLY_DOMAIN', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> DATA_TYPE() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::DATA_TYPE([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::DATA_TYPE', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> SPEECH_TIMEOUT() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::SPEECH_TIMEOUT([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::SPEECH_TIMEOUT', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> NET_TIMEOUT() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::NET_TIMEOUT([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::NET_TIMEOUT', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> SUBJECT() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::SUBJECT([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::SUBJECT', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> PARAMS() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::PARAMS([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::PARAMS', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> PROT_TYPE() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::PROT_TYPE([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::PROT_TYPE', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> SSL_CERT() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::SSL_CERT([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::SSL_CERT', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> POWER_CYCLE() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::POWER_CYCLE([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::POWER_CYCLE', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> SAMPLE_RATE() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::SAMPLE_RATE([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::SAMPLE_RATE', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> SAMPLE_RATE_8K() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::SAMPLE_RATE_8K([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::SAMPLE_RATE_8K', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> SAMPLE_RATE_16K() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::SAMPLE_RATE_16K([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::SAMPLE_RATE_16K', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> ENGINE_TYPE() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::ENGINE_TYPE([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::ENGINE_TYPE', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> TYPE_LOCAL_XTTS() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::TYPE_LOCAL_XTTS([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::TYPE_LOCAL_XTTS', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> TYPE_LOCAL() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::TYPE_LOCAL([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::TYPE_LOCAL', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> TYPE_CLOUD() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::TYPE_CLOUD([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::TYPE_CLOUD', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> TYPE_MIX() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::TYPE_MIX([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::TYPE_MIX', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> TYPE_AUTO() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::TYPE_AUTO([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::TYPE_AUTO', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> TEXT_ENCODING() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::TEXT_ENCODING([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::TEXT_ENCODING', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> RESULT_ENCODING() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::RESULT_ENCODING([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::RESULT_ENCODING', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> PLAYER_INIT() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::PLAYER_INIT([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::PLAYER_INIT', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> PLAYER_DEACTIVE() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::PLAYER_DEACTIVE([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::PLAYER_DEACTIVE', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> RECORDER_INIT() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::RECORDER_INIT([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::RECORDER_INIT', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> RECORDER_DEACTIVE() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::RECORDER_DEACTIVE([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::RECORDER_DEACTIVE', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> SPEED() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::SPEED([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::SPEED', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> PITCH() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::PITCH([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::PITCH', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> TTS_AUDIO_PATH() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::TTS_AUDIO_PATH([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::TTS_AUDIO_PATH', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> VAD_ENABLE() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::VAD_ENABLE([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::VAD_ENABLE', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> VAD_BOS() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::VAD_BOS([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::VAD_BOS', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> VAD_EOS() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::VAD_EOS([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::VAD_EOS', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> VOICE_NAME() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::VOICE_NAME([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::VOICE_NAME', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> VOICE_ID() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::VOICE_ID([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::VOICE_ID', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> VOICE_LANG() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::VOICE_LANG([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::VOICE_LANG', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> VOLUME() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::VOLUME([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::VOLUME', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> TTS_BUFFER_TIME() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::TTS_BUFFER_TIME([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::TTS_BUFFER_TIME', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> TTS_DATA_NOTIFY() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::TTS_DATA_NOTIFY([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::TTS_DATA_NOTIFY', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> NEXT_TEXT() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::NEXT_TEXT([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::NEXT_TEXT', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> MPPLAYINGINFOCENTER() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::MPPLAYINGINFOCENTER([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::MPPLAYINGINFOCENTER', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> AUDIO_SOURCE() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::AUDIO_SOURCE([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::AUDIO_SOURCE', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> ASR_AUDIO_PATH() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::ASR_AUDIO_PATH([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::ASR_AUDIO_PATH', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> ASR_SCH() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::ASR_SCH([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::ASR_SCH', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> ASR_PTT() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::ASR_PTT([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::ASR_PTT', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> ASR_PTT_HAVEDOT() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::ASR_PTT_HAVEDOT([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::ASR_PTT_HAVEDOT', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> ASR_PTT_NODOT() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::ASR_PTT_NODOT([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::ASR_PTT_NODOT', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> LOCAL_GRAMMAR() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::LOCAL_GRAMMAR([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::LOCAL_GRAMMAR', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> CLOUD_GRAMMAR() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::CLOUD_GRAMMAR([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::CLOUD_GRAMMAR', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> GRAMMAR_TYPE() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::GRAMMAR_TYPE([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::GRAMMAR_TYPE', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> GRAMMAR_CONTENT() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::GRAMMAR_CONTENT([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::GRAMMAR_CONTENT', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> LEXICON_CONTENT() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::LEXICON_CONTENT([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::LEXICON_CONTENT', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> LEXICON_NAME() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::LEXICON_NAME([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::LEXICON_NAME', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> GRAMMAR_LIST() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::GRAMMAR_LIST([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::GRAMMAR_LIST', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> NLP_VERSION() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::NLP_VERSION([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::NLP_VERSION', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> IVW_THRESHOLD() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::IVW_THRESHOLD([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::IVW_THRESHOLD', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> IVW_SST() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::IVW_SST([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::IVW_SST', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> IVW_ONESHOT() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::IVW_ONESHOT([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::IVW_ONESHOT', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> KEEP_ALIVE() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::KEEP_ALIVE([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::KEEP_ALIVE', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> IVW_AUDIO_PATH() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::IVW_AUDIO_PATH([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::IVW_AUDIO_PATH', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> ISE_CATEGORY() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::ISE_CATEGORY([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::ISE_CATEGORY', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> ISE_RESULT_LEVEL() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::ISE_RESULT_LEVEL([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::ISE_RESULT_LEVEL', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> ISE_RESULT_TYPE() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::ISE_RESULT_TYPE([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::ISE_RESULT_TYPE', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> ISE_AUDIO_PATH() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::ISE_AUDIO_PATH([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::ISE_AUDIO_PATH', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> ISE_AUTO_TRACKING() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::ISE_AUTO_TRACKING([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::ISE_AUTO_TRACKING', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> ISE_TRACK_TYPE() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::ISE_TRACK_TYPE([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::ISE_TRACK_TYPE', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> PLUS_LOCAL_ALL() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::PLUS_LOCAL_ALL([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::PLUS_LOCAL_ALL', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> PLUS_LOCAL_TTS() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::PLUS_LOCAL_TTS([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::PLUS_LOCAL_TTS', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> PLUS_LOCAL_ASR() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::PLUS_LOCAL_ASR([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::PLUS_LOCAL_ASR', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> PLUS_LOCAL_IVW() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::PLUS_LOCAL_IVW([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::PLUS_LOCAL_IVW', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> MFV_AUTH_ID() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::MFV_AUTH_ID([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::MFV_AUTH_ID', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> MFV_SUB() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::MFV_SUB([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::MFV_SUB', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> MFV_SST() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::MFV_SST([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::MFV_SST', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> MFV_VCM() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::MFV_VCM([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::MFV_VCM', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> MFV_SCENES() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::MFV_SCENES([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::MFV_SCENES', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> MFV_AFC() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::MFV_AFC([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::MFV_AFC', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> MFV_DATA_PATH() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::MFV_DATA_PATH([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::MFV_DATA_PATH', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> MFV_RGN() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::MFV_RGN([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::MFV_RGN', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> MFV_TSD() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::MFV_TSD([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::MFV_TSD', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> MFV_PTXT() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::MFV_PTXT([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::MFV_PTXT', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> MFV_PWDT() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::MFV_PWDT([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::MFV_PWDT', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> MFV_FIN() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::MFV_FIN([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::MFV_FIN', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> MFV_WTT() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::MFV_WTT([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::MFV_WTT', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> MFV_DATA_FORMAT() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::MFV_DATA_FORMAT([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::MFV_DATA_FORMAT', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> MFV_DATA_ENCODING() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::MFV_DATA_ENCODING([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::MFV_DATA_ENCODING', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> FACE_SUB() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::FACE_SUB([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::FACE_SUB', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> FACE_WFR() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::FACE_WFR([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::FACE_WFR', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> FACE_SST() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::FACE_SST([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::FACE_SST', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> FACE_REG() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::FACE_REG([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::FACE_REG', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> FACE_VERIFY() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::FACE_VERIFY([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::FACE_VERIFY', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> FACE_DETECT() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::FACE_DETECT([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::FACE_DETECT', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> FACE_ALIGN() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::FACE_ALIGN([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::FACE_ALIGN', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> FACE_ATTR() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::FACE_ATTR([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::FACE_ATTR', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> FACE_AUE() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::FACE_AUE([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::FACE_AUE', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> FACE_RAW() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::FACE_RAW([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::FACE_RAW', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> FACE_PSET() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::FACE_PSET([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::FACE_PSET', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> FACE_SKIP() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::FACE_SKIP([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::FACE_SKIP', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> FACE_GID() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::FACE_GID([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::FACE_GID', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> FACE_AUTH_ID() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::FACE_AUTH_ID([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::FACE_AUTH_ID', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<String> FACE_DVC() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlySpeechConstant::FACE_DVC([])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlySpeechConstant::FACE_DVC', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  //endregion
}