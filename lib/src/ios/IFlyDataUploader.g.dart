// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:xfiat_fluttify/src/ios/ios.export.g.dart';
import 'package:xfiat_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

class IFlyDataUploader extends NSObject  {
  //region constants
  
  //endregion

  //region creators
  static Future<IFlyDataUploader> create__() async {
    final int refId = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('ObjectFactory::createIFlyDataUploader');
    final object = IFlyDataUploader()..refId = refId..tag = 'xfiat_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  //endregion

  //region getters
  Future<String> get_dataName() async {
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod("IFlyDataUploader::get_dataName", {'refId': refId});
  
    return result;
  }
  
  Future<String> get_data() async {
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod("IFlyDataUploader::get_data", {'refId': refId});
  
    return result;
  }
  
  //endregion

  //region setters
  Future<void> set_dataName(String dataName) async {
    await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlyDataUploader::set_dataName', {'refId': refId, "dataName": dataName});
  
  
  }
  
  Future<void> set_data(String data) async {
    await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlyDataUploader::set_data', {'refId': refId, "data": data});
  
  
  }
  
  //endregion

  //region methods
  Future<void> uploadDataWithCompletionHandlerNamedata(void completionHandler(String result, IFlySpeechError error), String name, String data) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlyDataUploader@$refId::uploadDataWithCompletionHandler([\'name\':$name, \'data\':$data])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlyDataUploader::uploadDataWithCompletionHandlerNamedata', {"name": name, "data": data, "refId": refId});
  
  
    // handle native call
    MethodChannel('IFlyDataUploader::uploadDataWithCompletionHandlerNamedata::Callback')
        .setMethodCallHandler((methodCall) async {
          final args = methodCall.arguments as Map;
          // final refId = args['callerRefId'] as int;
          // if (refId != this.refId) return;
  
          switch (methodCall.method) {
            case 'Callback::IFlyUploadDataCompletionHandler::IFlyUploadDataCompletionHandler':
              // print log
              if (fluttifyLogEnabled) {
        
              }
        
              // handle the native call
              completionHandler(args['result'], IFlySpeechError()..refId = (args['error'])..tag = 'xfiat_fluttify');
              break;
            default:
              break;
          }
        });
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  Future<void> setParameterForKey(String parameter, String key) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: IFlyDataUploader@$refId::setParameter([\'parameter\':$parameter, \'key\':$key])');
    }
  
    // invoke native method
    final result = await MethodChannel('com.fluttify/xfiat_fluttify').invokeMethod('IFlyDataUploader::setParameterForKey', {"parameter": parameter, "key": key, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  //endregion
}