//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "XfiatFluttifyPlugin.h"
#import <objc/runtime.h>

typedef void (^Handler)(NSObject <FlutterPluginRegistrar> *, NSDictionary<NSString *, NSObject *> *, FlutterResult);

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation XfiatFluttifyPlugin {
  NSObject <FlutterPluginRegistrar> * _registrar;
  NSDictionary<NSString *, Handler> *_handlerMap;
}

- (instancetype) initWithFlutterPluginRegistrar: (NSObject <FlutterPluginRegistrar> *) registrar {
  self = [super init];
  if (self) {
    _registrar = registrar;
    // 处理方法们
    _handlerMap = @{
      @"IFlySpeechSynthesizerDelegate::onCompleted": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // ref arg
          IFlySpeechError* error = (IFlySpeechError*) HEAP[@([args[@"error"] integerValue])];
      
          // ref
          id<IFlySpeechSynthesizerDelegate> ref = (id<IFlySpeechSynthesizerDelegate>) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechSynthesizerDelegate@%@::onCompleted(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onCompleted : error];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechSynthesizerDelegate::onSpeakBegin": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          id<IFlySpeechSynthesizerDelegate> ref = (id<IFlySpeechSynthesizerDelegate>) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechSynthesizerDelegate@%@::onSpeakBegin(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onSpeakBegin ];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechSynthesizerDelegate::onBufferProgressMessage": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          int progress = [args[@"progress"] intValue];
          // jsonable arg
          NSString* msg = (NSString*) args[@"msg"];
      
          // ref
          id<IFlySpeechSynthesizerDelegate> ref = (id<IFlySpeechSynthesizerDelegate>) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechSynthesizerDelegate@%@::onBufferProgress(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onBufferProgress : progress message: msg];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechSynthesizerDelegate::onSpeakProgressBeginPosendPos": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          int progress = [args[@"progress"] intValue];
          // jsonable arg
          int beginPos = [args[@"beginPos"] intValue];
          // jsonable arg
          int endPos = [args[@"endPos"] intValue];
      
          // ref
          id<IFlySpeechSynthesizerDelegate> ref = (id<IFlySpeechSynthesizerDelegate>) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechSynthesizerDelegate@%@::onSpeakProgress(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onSpeakProgress : progress beginPos: beginPos endPos: endPos];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechSynthesizerDelegate::onSpeakPaused": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          id<IFlySpeechSynthesizerDelegate> ref = (id<IFlySpeechSynthesizerDelegate>) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechSynthesizerDelegate@%@::onSpeakPaused(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onSpeakPaused ];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechSynthesizerDelegate::onSpeakResumed": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          id<IFlySpeechSynthesizerDelegate> ref = (id<IFlySpeechSynthesizerDelegate>) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechSynthesizerDelegate@%@::onSpeakResumed(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onSpeakResumed ];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechSynthesizerDelegate::onSpeakCancel": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          id<IFlySpeechSynthesizerDelegate> ref = (id<IFlySpeechSynthesizerDelegate>) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechSynthesizerDelegate@%@::onSpeakCancel(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onSpeakCancel ];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechSynthesizerDelegate::onEventArg0arg1data": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          int eventType = [args[@"eventType"] intValue];
          // jsonable arg
          int arg0 = [args[@"arg0"] intValue];
          // jsonable arg
          int arg1 = [args[@"arg1"] intValue];
          // ref arg
          NSData* eventData = (NSData*) HEAP[@([args[@"eventData"] integerValue])];
      
          // ref
          id<IFlySpeechSynthesizerDelegate> ref = (id<IFlySpeechSynthesizerDelegate>) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechSynthesizerDelegate@%@::onEvent(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onEvent : eventType arg0: arg0 arg1: arg1 data: eventData];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlyRecognizerViewDelegate::onResultIsLast": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray<NSNumber*>* resultArrayRefArray = (NSArray<NSNumber*> *) args[@"resultArray"];
          NSMutableArray<NSArray*>* resultArray = [NSMutableArray arrayWithCapacity:resultArrayRefArray.count];
          for (int i = 0; i < resultArrayRefArray.count; i++) {
              NSArray* item = (NSArray*) HEAP[[resultArrayRefArray objectAtIndex:i]];
              [resultArray addObject:item];
          }
          // jsonable arg
          BOOL isLast = [args[@"isLast"] boolValue];
      
          // ref
          id<IFlyRecognizerViewDelegate> ref = (id<IFlyRecognizerViewDelegate>) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyRecognizerViewDelegate@%@::onResult(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onResult : resultArray isLast: isLast];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlyRecognizerViewDelegate::onCompleted": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // ref arg
          IFlySpeechError* error = (IFlySpeechError*) HEAP[@([args[@"error"] integerValue])];
      
          // ref
          id<IFlyRecognizerViewDelegate> ref = (id<IFlyRecognizerViewDelegate>) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyRecognizerViewDelegate@%@::onCompleted(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onCompleted : error];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechRecognizer::sharedInstance": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechRecognizer::sharedInstance(暂未实现参数打印)");
          }
      
          // invoke native method
          IFlySpeechRecognizer* result = [IFlySpeechRecognizer sharedInstance];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          methodResult(@((result).hash));
      },
      @"IFlySpeechRecognizer::destroy": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          IFlySpeechRecognizer* ref = (IFlySpeechRecognizer*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechRecognizer@%@::destroy(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref destroy];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlySpeechRecognizer::setParameterForKey": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* value = (NSString*) args[@"value"];
          // jsonable arg
          NSString* key = (NSString*) args[@"key"];
      
          // ref
          IFlySpeechRecognizer* ref = (IFlySpeechRecognizer*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechRecognizer@%@::setParameter(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref setParameter: value forKey: key];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlySpeechRecognizer::parameterForKey": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* key = (NSString*) args[@"key"];
      
          // ref
          IFlySpeechRecognizer* ref = (IFlySpeechRecognizer*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechRecognizer@%@::parameterForKey(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          NSString* result = [ref parameterForKey: key];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechRecognizer::startListening": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          IFlySpeechRecognizer* ref = (IFlySpeechRecognizer*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechRecognizer@%@::startListening(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref startListening];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlySpeechRecognizer::stopListening": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          IFlySpeechRecognizer* ref = (IFlySpeechRecognizer*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechRecognizer@%@::stopListening(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref stopListening ];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechRecognizer::cancel": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          IFlySpeechRecognizer* ref = (IFlySpeechRecognizer*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechRecognizer@%@::cancel(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cancel ];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechRecognizer::buildGrammarCompletionHandlerGrammarTypegrammarContent": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
          // jsonable arg
          NSString* grammarType = (NSString*) args[@"grammarType"];
          // jsonable arg
          NSString* grammarContent = (NSString*) args[@"grammarContent"];
      
          // ref
          IFlySpeechRecognizer* ref = (IFlySpeechRecognizer*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechRecognizer@%@::buildGrammarCompletionHandler(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          int result = [ref buildGrammarCompletionHandler: ^(NSString* grammarId, IFlySpeechError* error) {
              FlutterMethodChannel *channel = [FlutterMethodChannel
                  methodChannelWithName:@"IFlySpeechRecognizer::buildGrammarCompletionHandlerGrammarTypegrammarContent::Callback"
                        binaryMessenger:[self->_registrar messenger]];
      
              // print log
              if (enableLog) {
                  NSLog(@"");
              }
      
              // 构造可以直接传输的参数
              // jsonable callback arg
              NSString* arggrammarId = grammarId;
              // ref callback arg
              NSNumber* argerror = @(error.hash);
              HEAP[argerror] = error;
      
              [channel invokeMethod:@"Callback::IFlyOnBuildFinishCompletionHandler::IFlyOnBuildFinishCompletionHandler" arguments:@{@"grammarId": arggrammarId, @"error": argerror}];
      
          } grammarType: grammarType grammarContent: grammarContent];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlySpeechRecognizer::writeAudio": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // ref arg
          NSData* audioData = (NSData*) HEAP[@([args[@"audioData"] integerValue])];
      
          // ref
          IFlySpeechRecognizer* ref = (IFlySpeechRecognizer*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechRecognizer@%@::writeAudio(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref writeAudio: audioData];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlySetting::getVersion": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySetting::getVersion(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySetting getVersion];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySetting::logLvl": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySetting::logLvl(暂未实现参数打印)");
          }
      
          // invoke native method
          LOG_LEVEL result = [IFlySetting logLvl];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlySetting::showLogcat": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          BOOL showLog = [args[@"showLog"] boolValue];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySetting::showLogcat(暂未实现参数打印)");
          }
      
          // invoke native method
          [IFlySetting showLogcat: showLog];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySetting::setLogFile": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // enum arg
          LOG_LEVEL level = (LOG_LEVEL) [args[@"level"] integerValue];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySetting::setLogFile(暂未实现参数打印)");
          }
      
          // invoke native method
          [IFlySetting setLogFile: level];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySetting::setLogFilePath": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* path = (NSString*) args[@"path"];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySetting::setLogFilePath(暂未实现参数打印)");
          }
      
          // invoke native method
          [IFlySetting setLogFilePath: path];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlyRecognizerView::initWithOrigin": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* originValue = (NSValue*) HEAP[@([args[@"origin"] integerValue])];
          CGPoint origin;
          [originValue getValue:&origin];
      
          // ref
          IFlyRecognizerView* ref = (IFlyRecognizerView*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyRecognizerView@%@::initWithOrigin(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          id result = [ref initWithOrigin: origin];
      
          // result
          // return a ref
          HEAP[@(((NSObject*) result).hash)] = result;
          methodResult(@(((NSObject*) result).hash));
      },
      @"IFlyRecognizerView::initWithCenter": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // struct arg
          NSValue* centerValue = (NSValue*) HEAP[@([args[@"center"] integerValue])];
          CGPoint center;
          [centerValue getValue:&center];
      
          // ref
          IFlyRecognizerView* ref = (IFlyRecognizerView*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyRecognizerView@%@::initWithCenter(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          id result = [ref initWithCenter: center];
      
          // result
          // return a ref
          HEAP[@(((NSObject*) result).hash)] = result;
          methodResult(@(((NSObject*) result).hash));
      },
      @"IFlyRecognizerView::setAutoRotate": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          BOOL autoRotate = [args[@"autoRotate"] boolValue];
      
          // ref
          IFlyRecognizerView* ref = (IFlyRecognizerView*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyRecognizerView@%@::setAutoRotate(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setAutoRotate : autoRotate];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlyRecognizerView::setParameterForKey": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* value = (NSString*) args[@"value"];
          // jsonable arg
          NSString* key = (NSString*) args[@"key"];
      
          // ref
          IFlyRecognizerView* ref = (IFlyRecognizerView*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyRecognizerView@%@::setParameter(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref setParameter: value forKey: key];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlyRecognizerView::parameterForKey": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* key = (NSString*) args[@"key"];
      
          // ref
          IFlyRecognizerView* ref = (IFlyRecognizerView*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyRecognizerView@%@::parameterForKey(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          NSString* result = [ref parameterForKey: key];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlyRecognizerView::start": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          IFlyRecognizerView* ref = (IFlyRecognizerView*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyRecognizerView@%@::start(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref start];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlyRecognizerView::cancel": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          IFlyRecognizerView* ref = (IFlyRecognizerView*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyRecognizerView@%@::cancel(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cancel ];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlyPcmRecorderDelegate::onIFlyRecorderVolumeChanged": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          int power = [args[@"power"] intValue];
      
          // ref
          id<IFlyPcmRecorderDelegate> ref = (id<IFlyPcmRecorderDelegate>) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyPcmRecorderDelegate@%@::onIFlyRecorderVolumeChanged(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onIFlyRecorderVolumeChanged : power];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechEvaluatorDelegate::onVolumeChangedBuffer": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          int volume = [args[@"volume"] intValue];
          // ref arg
          NSData* buffer = (NSData*) HEAP[@([args[@"buffer"] integerValue])];
      
          // ref
          id<IFlySpeechEvaluatorDelegate> ref = (id<IFlySpeechEvaluatorDelegate>) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechEvaluatorDelegate@%@::onVolumeChanged(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onVolumeChanged : volume buffer: buffer];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechEvaluatorDelegate::onBeginOfSpeech": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          id<IFlySpeechEvaluatorDelegate> ref = (id<IFlySpeechEvaluatorDelegate>) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechEvaluatorDelegate@%@::onBeginOfSpeech(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onBeginOfSpeech ];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechEvaluatorDelegate::onEndOfSpeech": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          id<IFlySpeechEvaluatorDelegate> ref = (id<IFlySpeechEvaluatorDelegate>) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechEvaluatorDelegate@%@::onEndOfSpeech(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onEndOfSpeech ];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechEvaluatorDelegate::onCancel": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          id<IFlySpeechEvaluatorDelegate> ref = (id<IFlySpeechEvaluatorDelegate>) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechEvaluatorDelegate@%@::onCancel(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onCancel ];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechEvaluatorDelegate::onCompleted": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // ref arg
          IFlySpeechError* errorCode = (IFlySpeechError*) HEAP[@([args[@"errorCode"] integerValue])];
      
          // ref
          id<IFlySpeechEvaluatorDelegate> ref = (id<IFlySpeechEvaluatorDelegate>) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechEvaluatorDelegate@%@::onCompleted(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onCompleted : errorCode];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechEvaluatorDelegate::onResultsIsLast": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // ref arg
          NSData* results = (NSData*) HEAP[@([args[@"results"] integerValue])];
          // jsonable arg
          BOOL isLast = [args[@"isLast"] boolValue];
      
          // ref
          id<IFlySpeechEvaluatorDelegate> ref = (id<IFlySpeechEvaluatorDelegate>) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechEvaluatorDelegate@%@::onResults(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onResults : results isLast: isLast];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlyVoiceWakeuper::sharedInstance": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyVoiceWakeuper::sharedInstance(暂未实现参数打印)");
          }
      
          // invoke native method
          IFlyVoiceWakeuper* result = [IFlyVoiceWakeuper sharedInstance];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          methodResult(@((result).hash));
      },
      @"IFlyVoiceWakeuper::startListening": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          IFlyVoiceWakeuper* ref = (IFlyVoiceWakeuper*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyVoiceWakeuper@%@::startListening(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref startListening];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlyVoiceWakeuper::stopListening": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          IFlyVoiceWakeuper* ref = (IFlyVoiceWakeuper*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyVoiceWakeuper@%@::stopListening(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref stopListening];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlyVoiceWakeuper::cancel": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          IFlyVoiceWakeuper* ref = (IFlyVoiceWakeuper*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyVoiceWakeuper@%@::cancel(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref cancel];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlyVoiceWakeuper::getParameter": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* key = (NSString*) args[@"key"];
      
          // ref
          IFlyVoiceWakeuper* ref = (IFlyVoiceWakeuper*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyVoiceWakeuper@%@::getParameter(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          NSString* result = [ref getParameter: key];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlyVoiceWakeuper::setParameterForKey": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* value = (NSString*) args[@"value"];
          // jsonable arg
          NSString* key = (NSString*) args[@"key"];
      
          // ref
          IFlyVoiceWakeuper* ref = (IFlyVoiceWakeuper*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyVoiceWakeuper@%@::setParameter(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref setParameter: value forKey: key];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlyVoiceWakeuper::writeAudio": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // ref arg
          NSData* audioData = (NSData*) HEAP[@([args[@"audioData"] integerValue])];
      
          // ref
          IFlyVoiceWakeuper* ref = (IFlyVoiceWakeuper*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyVoiceWakeuper@%@::writeAudio(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref writeAudio: audioData];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlySpeechConstant::APPID": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::APPID(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant APPID];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::ACCENT": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::ACCENT(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant ACCENT];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::ACCENT_MANDARIN": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::ACCENT_MANDARIN(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant ACCENT_MANDARIN];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::ACCENT_HENANESE": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::ACCENT_HENANESE(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant ACCENT_HENANESE];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::ACCENT_SICHUANESE": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::ACCENT_SICHUANESE(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant ACCENT_SICHUANESE];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::ACCENT_CANTONESE": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::ACCENT_CANTONESE(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant ACCENT_CANTONESE];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::LANGUAGE": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::LANGUAGE(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant LANGUAGE];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::LANGUAGE_CHINESE": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::LANGUAGE_CHINESE(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant LANGUAGE_CHINESE];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::LANGUAGE_CHINESE_TW": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::LANGUAGE_CHINESE_TW(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant LANGUAGE_CHINESE_TW];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::LANGUAGE_ENGLISH": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::LANGUAGE_ENGLISH(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant LANGUAGE_ENGLISH];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::LANGUAGE_RUSSIAN": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::LANGUAGE_RUSSIAN(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant LANGUAGE_RUSSIAN];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::LANGUAGE_JAPANESE": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::LANGUAGE_JAPANESE(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant LANGUAGE_JAPANESE];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::LANGUAGE_FRENCH": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::LANGUAGE_FRENCH(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant LANGUAGE_FRENCH];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::LANGUAGE_SPANISH": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::LANGUAGE_SPANISH(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant LANGUAGE_SPANISH];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::LANGUAGE_KOREAN": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::LANGUAGE_KOREAN(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant LANGUAGE_KOREAN];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::RESULT_TYPE": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::RESULT_TYPE(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant RESULT_TYPE];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::IFLY_DOMAIN": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::IFLY_DOMAIN(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant IFLY_DOMAIN];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::DATA_TYPE": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::DATA_TYPE(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant DATA_TYPE];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::SPEECH_TIMEOUT": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::SPEECH_TIMEOUT(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant SPEECH_TIMEOUT];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::NET_TIMEOUT": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::NET_TIMEOUT(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant NET_TIMEOUT];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::SUBJECT": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::SUBJECT(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant SUBJECT];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::PARAMS": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::PARAMS(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant PARAMS];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::PROT_TYPE": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::PROT_TYPE(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant PROT_TYPE];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::SSL_CERT": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::SSL_CERT(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant SSL_CERT];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::POWER_CYCLE": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::POWER_CYCLE(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant POWER_CYCLE];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::SAMPLE_RATE": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::SAMPLE_RATE(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant SAMPLE_RATE];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::SAMPLE_RATE_8K": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::SAMPLE_RATE_8K(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant SAMPLE_RATE_8K];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::SAMPLE_RATE_16K": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::SAMPLE_RATE_16K(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant SAMPLE_RATE_16K];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::ENGINE_TYPE": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::ENGINE_TYPE(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant ENGINE_TYPE];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::TYPE_LOCAL_XTTS": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::TYPE_LOCAL_XTTS(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant TYPE_LOCAL_XTTS];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::TYPE_LOCAL": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::TYPE_LOCAL(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant TYPE_LOCAL];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::TYPE_CLOUD": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::TYPE_CLOUD(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant TYPE_CLOUD];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::TYPE_MIX": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::TYPE_MIX(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant TYPE_MIX];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::TYPE_AUTO": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::TYPE_AUTO(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant TYPE_AUTO];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::TEXT_ENCODING": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::TEXT_ENCODING(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant TEXT_ENCODING];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::RESULT_ENCODING": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::RESULT_ENCODING(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant RESULT_ENCODING];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::PLAYER_INIT": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::PLAYER_INIT(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant PLAYER_INIT];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::PLAYER_DEACTIVE": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::PLAYER_DEACTIVE(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant PLAYER_DEACTIVE];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::RECORDER_INIT": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::RECORDER_INIT(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant RECORDER_INIT];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::RECORDER_DEACTIVE": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::RECORDER_DEACTIVE(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant RECORDER_DEACTIVE];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::SPEED": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::SPEED(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant SPEED];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::PITCH": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::PITCH(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant PITCH];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::TTS_AUDIO_PATH": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::TTS_AUDIO_PATH(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant TTS_AUDIO_PATH];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::VAD_ENABLE": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::VAD_ENABLE(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant VAD_ENABLE];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::VAD_BOS": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::VAD_BOS(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant VAD_BOS];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::VAD_EOS": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::VAD_EOS(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant VAD_EOS];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::VOICE_NAME": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::VOICE_NAME(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant VOICE_NAME];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::VOICE_ID": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::VOICE_ID(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant VOICE_ID];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::VOICE_LANG": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::VOICE_LANG(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant VOICE_LANG];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::VOLUME": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::VOLUME(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant VOLUME];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::TTS_BUFFER_TIME": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::TTS_BUFFER_TIME(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant TTS_BUFFER_TIME];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::TTS_DATA_NOTIFY": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::TTS_DATA_NOTIFY(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant TTS_DATA_NOTIFY];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::NEXT_TEXT": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::NEXT_TEXT(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant NEXT_TEXT];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::MPPLAYINGINFOCENTER": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::MPPLAYINGINFOCENTER(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant MPPLAYINGINFOCENTER];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::AUDIO_SOURCE": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::AUDIO_SOURCE(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant AUDIO_SOURCE];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::ASR_AUDIO_PATH": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::ASR_AUDIO_PATH(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant ASR_AUDIO_PATH];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::ASR_SCH": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::ASR_SCH(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant ASR_SCH];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::ASR_PTT": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::ASR_PTT(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant ASR_PTT];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::ASR_PTT_HAVEDOT": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::ASR_PTT_HAVEDOT(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant ASR_PTT_HAVEDOT];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::ASR_PTT_NODOT": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::ASR_PTT_NODOT(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant ASR_PTT_NODOT];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::LOCAL_GRAMMAR": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::LOCAL_GRAMMAR(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant LOCAL_GRAMMAR];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::CLOUD_GRAMMAR": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::CLOUD_GRAMMAR(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant CLOUD_GRAMMAR];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::GRAMMAR_TYPE": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::GRAMMAR_TYPE(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant GRAMMAR_TYPE];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::GRAMMAR_CONTENT": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::GRAMMAR_CONTENT(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant GRAMMAR_CONTENT];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::LEXICON_CONTENT": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::LEXICON_CONTENT(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant LEXICON_CONTENT];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::LEXICON_NAME": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::LEXICON_NAME(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant LEXICON_NAME];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::GRAMMAR_LIST": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::GRAMMAR_LIST(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant GRAMMAR_LIST];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::NLP_VERSION": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::NLP_VERSION(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant NLP_VERSION];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::IVW_THRESHOLD": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::IVW_THRESHOLD(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant IVW_THRESHOLD];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::IVW_SST": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::IVW_SST(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant IVW_SST];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::IVW_ONESHOT": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::IVW_ONESHOT(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant IVW_ONESHOT];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::KEEP_ALIVE": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::KEEP_ALIVE(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant KEEP_ALIVE];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::IVW_AUDIO_PATH": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::IVW_AUDIO_PATH(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant IVW_AUDIO_PATH];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::ISE_CATEGORY": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::ISE_CATEGORY(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant ISE_CATEGORY];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::ISE_RESULT_LEVEL": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::ISE_RESULT_LEVEL(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant ISE_RESULT_LEVEL];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::ISE_RESULT_TYPE": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::ISE_RESULT_TYPE(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant ISE_RESULT_TYPE];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::ISE_AUDIO_PATH": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::ISE_AUDIO_PATH(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant ISE_AUDIO_PATH];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::ISE_AUTO_TRACKING": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::ISE_AUTO_TRACKING(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant ISE_AUTO_TRACKING];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::ISE_TRACK_TYPE": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::ISE_TRACK_TYPE(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant ISE_TRACK_TYPE];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::PLUS_LOCAL_ALL": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::PLUS_LOCAL_ALL(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant PLUS_LOCAL_ALL];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::PLUS_LOCAL_TTS": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::PLUS_LOCAL_TTS(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant PLUS_LOCAL_TTS];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::PLUS_LOCAL_ASR": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::PLUS_LOCAL_ASR(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant PLUS_LOCAL_ASR];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::PLUS_LOCAL_IVW": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::PLUS_LOCAL_IVW(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant PLUS_LOCAL_IVW];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::MFV_AUTH_ID": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::MFV_AUTH_ID(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant MFV_AUTH_ID];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::MFV_SUB": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::MFV_SUB(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant MFV_SUB];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::MFV_SST": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::MFV_SST(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant MFV_SST];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::MFV_VCM": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::MFV_VCM(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant MFV_VCM];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::MFV_SCENES": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::MFV_SCENES(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant MFV_SCENES];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::MFV_AFC": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::MFV_AFC(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant MFV_AFC];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::MFV_DATA_PATH": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::MFV_DATA_PATH(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant MFV_DATA_PATH];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::MFV_RGN": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::MFV_RGN(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant MFV_RGN];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::MFV_TSD": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::MFV_TSD(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant MFV_TSD];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::MFV_PTXT": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::MFV_PTXT(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant MFV_PTXT];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::MFV_PWDT": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::MFV_PWDT(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant MFV_PWDT];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::MFV_FIN": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::MFV_FIN(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant MFV_FIN];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::MFV_WTT": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::MFV_WTT(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant MFV_WTT];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::MFV_DATA_FORMAT": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::MFV_DATA_FORMAT(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant MFV_DATA_FORMAT];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::MFV_DATA_ENCODING": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::MFV_DATA_ENCODING(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant MFV_DATA_ENCODING];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::FACE_SUB": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::FACE_SUB(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant FACE_SUB];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::FACE_WFR": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::FACE_WFR(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant FACE_WFR];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::FACE_SST": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::FACE_SST(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant FACE_SST];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::FACE_REG": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::FACE_REG(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant FACE_REG];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::FACE_VERIFY": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::FACE_VERIFY(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant FACE_VERIFY];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::FACE_DETECT": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::FACE_DETECT(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant FACE_DETECT];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::FACE_ALIGN": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::FACE_ALIGN(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant FACE_ALIGN];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::FACE_ATTR": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::FACE_ATTR(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant FACE_ATTR];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::FACE_AUE": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::FACE_AUE(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant FACE_AUE];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::FACE_RAW": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::FACE_RAW(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant FACE_RAW];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::FACE_PSET": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::FACE_PSET(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant FACE_PSET];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::FACE_SKIP": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::FACE_SKIP(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant FACE_SKIP];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::FACE_GID": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::FACE_GID(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant FACE_GID];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::FACE_AUTH_ID": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::FACE_AUTH_ID(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant FACE_AUTH_ID];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechConstant::FACE_DVC": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechConstant::FACE_DVC(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechConstant FACE_DVC];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechUnderstander::sharedInstance": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechUnderstander::sharedInstance(暂未实现参数打印)");
          }
      
          // invoke native method
          IFlySpeechUnderstander* result = [IFlySpeechUnderstander sharedInstance];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          methodResult(@((result).hash));
      },
      @"IFlySpeechUnderstander::startListening": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          IFlySpeechUnderstander* ref = (IFlySpeechUnderstander*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechUnderstander@%@::startListening(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref startListening];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlySpeechUnderstander::stopListening": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          IFlySpeechUnderstander* ref = (IFlySpeechUnderstander*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechUnderstander@%@::stopListening(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref stopListening ];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechUnderstander::cancel": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          IFlySpeechUnderstander* ref = (IFlySpeechUnderstander*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechUnderstander@%@::cancel(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cancel ];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechUnderstander::setParameterForKey": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* value = (NSString*) args[@"value"];
          // jsonable arg
          NSString* key = (NSString*) args[@"key"];
      
          // ref
          IFlySpeechUnderstander* ref = (IFlySpeechUnderstander*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechUnderstander@%@::setParameter(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref setParameter: value forKey: key];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlySpeechUnderstander::writeAudio": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // ref arg
          NSData* audioData = (NSData*) HEAP[@([args[@"audioData"] integerValue])];
      
          // ref
          IFlySpeechUnderstander* ref = (IFlySpeechUnderstander*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechUnderstander@%@::writeAudio(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref writeAudio: audioData];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlySpeechUnderstander::destroy": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          IFlySpeechUnderstander* ref = (IFlySpeechUnderstander*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechUnderstander@%@::destroy(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref destroy];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlyDebugLog::showLog": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* format = (NSString*) args[@"format"];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyDebugLog::showLog(暂未实现参数打印)");
          }
      
          // invoke native method
          [IFlyDebugLog showLog: format];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlyDebugLog::writeLog": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyDebugLog::writeLog(暂未实现参数打印)");
          }
      
          // invoke native method
          [IFlyDebugLog writeLog];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlyDebugLog::setShowLog": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          BOOL showLog = [args[@"showLog"] boolValue];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyDebugLog::setShowLog(暂未实现参数打印)");
          }
      
          // invoke native method
          [IFlyDebugLog setShowLog: showLog];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlyDataUploader::uploadDataWithCompletionHandlerNamedata": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
          // jsonable arg
          NSString* name = (NSString*) args[@"name"];
          // jsonable arg
          NSString* data = (NSString*) args[@"data"];
      
          // ref
          IFlyDataUploader* ref = (IFlyDataUploader*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyDataUploader@%@::uploadDataWithCompletionHandler(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref uploadDataWithCompletionHandler : ^(NSString* result, IFlySpeechError* error) {
              FlutterMethodChannel *channel = [FlutterMethodChannel
                  methodChannelWithName:@"IFlyDataUploader::uploadDataWithCompletionHandlerNamedata::Callback"
                        binaryMessenger:[self->_registrar messenger]];
      
              // print log
              if (enableLog) {
                  NSLog(@"");
              }
      
              // 构造可以直接传输的参数
              // jsonable callback arg
              NSString* argresult = result;
              // ref callback arg
              NSNumber* argerror = @(error.hash);
              HEAP[argerror] = error;
      
              [channel invokeMethod:@"Callback::IFlyUploadDataCompletionHandler::IFlyUploadDataCompletionHandler" arguments:@{@"result": argresult, @"error": argerror}];
      
          } name: name data: data];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlyDataUploader::setParameterForKey": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* parameter = (NSString*) args[@"parameter"];
          // jsonable arg
          NSString* key = (NSString*) args[@"key"];
      
          // ref
          IFlyDataUploader* ref = (IFlyDataUploader*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyDataUploader@%@::setParameter(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref setParameter : parameter forKey: key];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechRecognizerDelegate::onCompleted": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // ref arg
          IFlySpeechError* errorCode = (IFlySpeechError*) HEAP[@([args[@"errorCode"] integerValue])];
      
          // ref
          id<IFlySpeechRecognizerDelegate> ref = (id<IFlySpeechRecognizerDelegate>) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechRecognizerDelegate@%@::onCompleted(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onCompleted : errorCode];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechRecognizerDelegate::onResultsIsLast": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // list arg
          NSArray<NSNumber*>* resultsRefArray = (NSArray<NSNumber*> *) args[@"results"];
          NSMutableArray<NSArray*>* results = [NSMutableArray arrayWithCapacity:resultsRefArray.count];
          for (int i = 0; i < resultsRefArray.count; i++) {
              NSArray* item = (NSArray*) HEAP[[resultsRefArray objectAtIndex:i]];
              [results addObject:item];
          }
          // jsonable arg
          BOOL isLast = [args[@"isLast"] boolValue];
      
          // ref
          id<IFlySpeechRecognizerDelegate> ref = (id<IFlySpeechRecognizerDelegate>) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechRecognizerDelegate@%@::onResults(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onResults : results isLast: isLast];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechRecognizerDelegate::onVolumeChanged": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          int volume = [args[@"volume"] intValue];
      
          // ref
          id<IFlySpeechRecognizerDelegate> ref = (id<IFlySpeechRecognizerDelegate>) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechRecognizerDelegate@%@::onVolumeChanged(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onVolumeChanged : volume];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechRecognizerDelegate::onBeginOfSpeech": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          id<IFlySpeechRecognizerDelegate> ref = (id<IFlySpeechRecognizerDelegate>) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechRecognizerDelegate@%@::onBeginOfSpeech(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onBeginOfSpeech ];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechRecognizerDelegate::onEndOfSpeech": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          id<IFlySpeechRecognizerDelegate> ref = (id<IFlySpeechRecognizerDelegate>) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechRecognizerDelegate@%@::onEndOfSpeech(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onEndOfSpeech ];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechRecognizerDelegate::onCancel": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          id<IFlySpeechRecognizerDelegate> ref = (id<IFlySpeechRecognizerDelegate>) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechRecognizerDelegate@%@::onCancel(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onCancel ];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechRecognizerDelegate::onEventArg0arg1data": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          int eventType = [args[@"eventType"] intValue];
          // jsonable arg
          int arg0 = [args[@"arg0"] intValue];
          // jsonable arg
          int arg1 = [args[@"arg1"] intValue];
          // ref arg
          NSData* eventData = (NSData*) HEAP[@([args[@"eventData"] integerValue])];
      
          // ref
          id<IFlySpeechRecognizerDelegate> ref = (id<IFlySpeechRecognizerDelegate>) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechRecognizerDelegate@%@::onEvent(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onEvent : eventType arg0: arg0 arg1: arg1 data: eventData];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlyAudioSession::initPlayingAudioSession": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          BOOL isMPCenter = [args[@"isMPCenter"] boolValue];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyAudioSession::initPlayingAudioSession(暂未实现参数打印)");
          }
      
          // invoke native method
          [IFlyAudioSession initPlayingAudioSession: isMPCenter];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlyAudioSession::initRecordingAudioSession": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyAudioSession::initRecordingAudioSession(暂未实现参数打印)");
          }
      
          // invoke native method
          BOOL result = [IFlyAudioSession initRecordingAudioSession];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlyUserWords::initWithJson": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* json = (NSString*) args[@"json"];
      
          // ref
          IFlyUserWords* ref = (IFlyUserWords*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyUserWords@%@::initWithJson(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          id result = [ref initWithJson: json];
      
          // result
          // return a ref
          HEAP[@(((NSObject*) result).hash)] = result;
          methodResult(@(((NSObject*) result).hash));
      },
      @"IFlyUserWords::getWords": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* key = (NSString*) args[@"key"];
      
          // ref
          IFlyUserWords* ref = (IFlyUserWords*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyUserWords@%@::getWords(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          NSArray* result = [ref getWords: key];
      
          // result
          // 返回值: 列表
          NSMutableArray* refIdList = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [refIdList addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(refIdList);
      },
      @"IFlyUserWords::putWordValue": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* key = (NSString*) args[@"key"];
          // jsonable arg
          NSString* value = (NSString*) args[@"value"];
      
          // ref
          IFlyUserWords* ref = (IFlyUserWords*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyUserWords@%@::putWord(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref putWord: key value: value];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlyUserWords::putwordsWords": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* key = (NSString*) args[@"key"];
          // list arg
          NSArray<NSNumber*>* wordsRefArray = (NSArray<NSNumber*> *) args[@"words"];
          NSMutableArray<NSArray*>* words = [NSMutableArray arrayWithCapacity:wordsRefArray.count];
          for (int i = 0; i < wordsRefArray.count; i++) {
              NSArray* item = (NSArray*) HEAP[[wordsRefArray objectAtIndex:i]];
              [words addObject:item];
          }
      
          // ref
          IFlyUserWords* ref = (IFlyUserWords*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyUserWords@%@::putwords(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref putwords: key words: words];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlyUserWords::containsKey": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* key = (NSString*) args[@"key"];
      
          // ref
          IFlyUserWords* ref = (IFlyUserWords*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyUserWords@%@::containsKey(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref containsKey: key];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlyIdentityVerifierDelegate::onCompleted": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // ref arg
          IFlySpeechError* error = (IFlySpeechError*) HEAP[@([args[@"error"] integerValue])];
      
          // ref
          id<IFlyIdentityVerifierDelegate> ref = (id<IFlyIdentityVerifierDelegate>) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyIdentityVerifierDelegate@%@::onCompleted(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onCompleted : error];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlyIdentityVerifierDelegate::onEventArg1arg2extra": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          int eventType = [args[@"eventType"] intValue];
          // jsonable arg
          int arg1 = [args[@"arg1"] intValue];
          // jsonable arg
          int arg2 = [args[@"arg2"] intValue];
          // ref arg
          id obj = (id) HEAP[@([args[@"obj"] integerValue])];
      
          // ref
          id<IFlyIdentityVerifierDelegate> ref = (id<IFlyIdentityVerifierDelegate>) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyIdentityVerifierDelegate@%@::onEvent(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onEvent : eventType arg1: arg1 arg2: arg2 extra: obj];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlyTextUnderstander::understandTextWithCompletionHandler": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* text = (NSString*) args[@"text"];
      
      
          // ref
          IFlyTextUnderstander* ref = (IFlyTextUnderstander*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyTextUnderstander@%@::understandText(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          int result = [ref understandText: text withCompletionHandler: ^(NSString* result, IFlySpeechError* error) {
              FlutterMethodChannel *channel = [FlutterMethodChannel
                  methodChannelWithName:@"IFlyTextUnderstander::understandTextWithCompletionHandler::Callback"
                        binaryMessenger:[self->_registrar messenger]];
      
              // print log
              if (enableLog) {
                  NSLog(@"");
              }
      
              // 构造可以直接传输的参数
              // jsonable callback arg
              NSString* argresult = result;
              // ref callback arg
              NSNumber* argerror = @(error.hash);
              HEAP[argerror] = error;
      
              [channel invokeMethod:@"Callback::IFlyUnderstandTextCompletionHandler::IFlyUnderstandTextCompletionHandler" arguments:@{@"result": argresult, @"error": argerror}];
      
          }];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlyTextUnderstander::setParameterForKey": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* value = (NSString*) args[@"value"];
          // jsonable arg
          NSString* key = (NSString*) args[@"key"];
      
          // ref
          IFlyTextUnderstander* ref = (IFlyTextUnderstander*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyTextUnderstander@%@::setParameter(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref setParameter: value forKey: key];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlyTextUnderstander::cancel": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          IFlyTextUnderstander* ref = (IFlyTextUnderstander*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyTextUnderstander@%@::cancel(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cancel ];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechError::initWithError": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          int errorCode = [args[@"errorCode"] intValue];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechError::initWithError(暂未实现参数打印)");
          }
      
          // invoke native method
          IFlySpeechError* result = [IFlySpeechError initWithError: errorCode];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          methodResult(@((result).hash));
      },
      @"IFlySpeechError::errorCode": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          IFlySpeechError* ref = (IFlySpeechError*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechError@%@::errorCode(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          int result = [ref errorCode];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlySpeechError::errorDesc": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          IFlySpeechError* ref = (IFlySpeechError*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechError@%@::errorDesc(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          NSString* result = [ref errorDesc];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlyResourceUtil::ENGINE_START": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyResourceUtil::ENGINE_START(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlyResourceUtil ENGINE_START];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlyResourceUtil::ENGINE_DESTROY": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyResourceUtil::ENGINE_DESTROY(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlyResourceUtil ENGINE_DESTROY];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlyResourceUtil::ASR_RES_PATH": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyResourceUtil::ASR_RES_PATH(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlyResourceUtil ASR_RES_PATH];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlyResourceUtil::GRM_BUILD_PATH": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyResourceUtil::GRM_BUILD_PATH(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlyResourceUtil GRM_BUILD_PATH];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlyResourceUtil::TTS_RES_PATH": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyResourceUtil::TTS_RES_PATH(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlyResourceUtil TTS_RES_PATH];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlyResourceUtil::IVW_RES_PATH": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyResourceUtil::IVW_RES_PATH(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlyResourceUtil IVW_RES_PATH];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlyResourceUtil::GRAMMARTYPE": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyResourceUtil::GRAMMARTYPE(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlyResourceUtil GRAMMARTYPE];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlyResourceUtil::PLUS_LOCAL_DEFAULT_RES_PATH": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyResourceUtil::PLUS_LOCAL_DEFAULT_RES_PATH(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlyResourceUtil PLUS_LOCAL_DEFAULT_RES_PATH];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlyResourceUtil::generateResourcePath": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* path = (NSString*) args[@"path"];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyResourceUtil::generateResourcePath(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlyResourceUtil generateResourcePath: path];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlyResourceUtil::identifierForVoiceName": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* voiceName = (NSString*) args[@"voiceName"];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyResourceUtil::identifierForVoiceName(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlyResourceUtil identifierForVoiceName: voiceName];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechplusDelegate::onCompleted__int": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          int errorCode = [args[@"errorCode"] intValue];
      
          // ref
          id<IFlySpeechplusDelegate> ref = (id<IFlySpeechplusDelegate>) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechplusDelegate@%@::onCompleted(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onCompleted : errorCode];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechplusDelegate::onCompleted": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          id<IFlySpeechplusDelegate> ref = (id<IFlySpeechplusDelegate>) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechplusDelegate@%@::onCompleted(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onCompleted ];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechUtility::createUtility": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* params = (NSString*) args[@"params"];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechUtility::createUtility(暂未实现参数打印)");
          }
      
          // invoke native method
          IFlySpeechUtility* result = [IFlySpeechUtility createUtility: params];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          methodResult(@((result).hash));
      },
      @"IFlySpeechUtility::destroy": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechUtility::destroy(暂未实现参数打印)");
          }
      
          // invoke native method
          BOOL result = [IFlySpeechUtility destroy];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlySpeechUtility::getUtility": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechUtility::getUtility(暂未实现参数打印)");
          }
      
          // invoke native method
          IFlySpeechUtility* result = [IFlySpeechUtility getUtility];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          methodResult(@((result).hash));
      },
      @"IFlySpeechUtility::setParameterForKey": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* value = (NSString*) args[@"value"];
          // jsonable arg
          NSString* key = (NSString*) args[@"key"];
      
          // ref
          IFlySpeechUtility* ref = (IFlySpeechUtility*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechUtility@%@::setParameter(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref setParameter: value forKey: key];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlySpeechUtility::parameterForKey": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* key = (NSString*) args[@"key"];
      
          // ref
          IFlySpeechUtility* ref = (IFlySpeechUtility*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechUtility@%@::parameterForKey(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          NSString* result = [ref parameterForKey: key];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechUtility::checkServiceInstalled": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechUtility::checkServiceInstalled(暂未实现参数打印)");
          }
      
          // invoke native method
          BOOL result = [IFlySpeechUtility checkServiceInstalled];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlySpeechUtility::componentUrl": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechUtility::componentUrl(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlySpeechUtility componentUrl];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechUtility::openSpeechPlus": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // enum arg
          IFlySpeechPlusServiceType serviceType = (IFlySpeechPlusServiceType) [args[@"serviceType"] integerValue];
      
          // ref
          IFlySpeechUtility* ref = (IFlySpeechUtility*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechUtility@%@::openSpeechPlus(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref openSpeechPlus: serviceType];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlySpeechEvaluator::sharedInstance": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechEvaluator::sharedInstance(暂未实现参数打印)");
          }
      
          // invoke native method
          IFlySpeechEvaluator* result = [IFlySpeechEvaluator sharedInstance];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          methodResult(@((result).hash));
      },
      @"IFlySpeechEvaluator::destroy": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          IFlySpeechEvaluator* ref = (IFlySpeechEvaluator*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechEvaluator@%@::destroy(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref destroy];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlySpeechEvaluator::setParameterForKey": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* value = (NSString*) args[@"value"];
          // jsonable arg
          NSString* key = (NSString*) args[@"key"];
      
          // ref
          IFlySpeechEvaluator* ref = (IFlySpeechEvaluator*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechEvaluator@%@::setParameter(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref setParameter: value forKey: key];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlySpeechEvaluator::parameterForKey": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* key = (NSString*) args[@"key"];
      
          // ref
          IFlySpeechEvaluator* ref = (IFlySpeechEvaluator*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechEvaluator@%@::parameterForKey(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          NSString* result = [ref parameterForKey: key];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechEvaluator::startListeningParams": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // ref arg
          NSData* data = (NSData*) HEAP[@([args[@"data"] integerValue])];
          // jsonable arg
          NSString* params = (NSString*) args[@"params"];
      
          // ref
          IFlySpeechEvaluator* ref = (IFlySpeechEvaluator*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechEvaluator@%@::startListening(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref startListening: data params: params];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlySpeechEvaluator::stopListening": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          IFlySpeechEvaluator* ref = (IFlySpeechEvaluator*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechEvaluator@%@::stopListening(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref stopListening ];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechEvaluator::cancel": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          IFlySpeechEvaluator* ref = (IFlySpeechEvaluator*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechEvaluator@%@::cancel(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cancel ];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechEvaluator::writeAudio": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // ref arg
          NSData* audioData = (NSData*) HEAP[@([args[@"audioData"] integerValue])];
      
          // ref
          IFlySpeechEvaluator* ref = (IFlySpeechEvaluator*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechEvaluator@%@::writeAudio(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref writeAudio: audioData];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlyISVDelegate::onCompleted": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // ref arg
          IFlySpeechError* errorCode = (IFlySpeechError*) HEAP[@([args[@"errorCode"] integerValue])];
      
          // ref
          id<IFlyISVDelegate> ref = (id<IFlyISVDelegate>) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyISVDelegate@%@::onCompleted(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onCompleted : errorCode];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlyISVDelegate::onRecognition": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          id<IFlyISVDelegate> ref = (id<IFlyISVDelegate>) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyISVDelegate@%@::onRecognition(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onRecognition ];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlyISVDelegate::onVolumeChanged": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          int volume = [args[@"volume"] intValue];
      
          // ref
          id<IFlyISVDelegate> ref = (id<IFlyISVDelegate>) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyISVDelegate@%@::onVolumeChanged(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onVolumeChanged : volume];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlyVerifierUtil::generateNumberPassword": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          int length = [args[@"length"] intValue];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyVerifierUtil::generateNumberPassword(暂未实现参数打印)");
          }
      
          // invoke native method
          NSString* result = [IFlyVerifierUtil generateNumberPassword: length];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlyVerifierUtil::ARGBToGray": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // ref arg
          UIImage* sourceImage = (UIImage*) HEAP[@([args[@"sourceImage"] integerValue])];
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyVerifierUtil::ARGBToGray(暂未实现参数打印)");
          }
      
          // invoke native method
          UIImage* result = [IFlyVerifierUtil ARGBToGray: sourceImage];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          methodResult(@((result).hash));
      },
      @"IFlyISVRecognizer::sharedInstance": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyISVRecognizer::sharedInstance(暂未实现参数打印)");
          }
      
          // invoke native method
          IFlyISVRecognizer* result = [IFlyISVRecognizer sharedInstance];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          methodResult(@((result).hash));
      },
      @"IFlyISVRecognizer::generatePassword": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          int length = [args[@"length"] intValue];
      
          // ref
          IFlyISVRecognizer* ref = (IFlyISVRecognizer*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyISVRecognizer@%@::generatePassword(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          NSString* result = [ref generatePassword: length];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlyISVRecognizer::getPasswordList": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          int pwdt = [args[@"pwdt"] intValue];
      
          // ref
          IFlyISVRecognizer* ref = (IFlyISVRecognizer*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyISVRecognizer@%@::getPasswordList(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          NSArray* result = [ref getPasswordList: pwdt];
      
          // result
          // 返回值: 列表
          NSMutableArray* refIdList = [NSMutableArray array];
          for (int i = 0; i < result.count; i++) {
              NSObject* object = [result objectAtIndex:i];
              [refIdList addObject: @(object.hash)];
              HEAP[@([object hash])] = object;
          }
      
          methodResult(refIdList);
      },
      @"IFlyISVRecognizer::isListening": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          IFlyISVRecognizer* ref = (IFlyISVRecognizer*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyISVRecognizer@%@::isListening(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref isListening];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlyISVRecognizer::setParameterForKey": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* value = (NSString*) args[@"value"];
          // jsonable arg
          NSString* key = (NSString*) args[@"key"];
      
          // ref
          IFlyISVRecognizer* ref = (IFlyISVRecognizer*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyISVRecognizer@%@::setParameter(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref setParameter: value forKey: key];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlyISVRecognizer::getParameter": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* key = (NSString*) args[@"key"];
      
          // ref
          IFlyISVRecognizer* ref = (IFlyISVRecognizer*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyISVRecognizer@%@::getParameter(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          NSString* result = [ref getParameter: key];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlyISVRecognizer::startListening": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          IFlyISVRecognizer* ref = (IFlyISVRecognizer*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyISVRecognizer@%@::startListening(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref startListening ];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlyISVRecognizer::stopListening": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          IFlyISVRecognizer* ref = (IFlyISVRecognizer*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyISVRecognizer@%@::stopListening(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref stopListening ];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlyISVRecognizer::cancel": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          IFlyISVRecognizer* ref = (IFlyISVRecognizer*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyISVRecognizer@%@::cancel(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref cancel ];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlyVoiceWakeuperDelegate::onBeginOfSpeech": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          id<IFlyVoiceWakeuperDelegate> ref = (id<IFlyVoiceWakeuperDelegate>) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyVoiceWakeuperDelegate@%@::onBeginOfSpeech(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onBeginOfSpeech ];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlyVoiceWakeuperDelegate::onEndOfSpeech": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          id<IFlyVoiceWakeuperDelegate> ref = (id<IFlyVoiceWakeuperDelegate>) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyVoiceWakeuperDelegate@%@::onEndOfSpeech(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onEndOfSpeech ];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlyVoiceWakeuperDelegate::onCompleted": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // ref arg
          IFlySpeechError* error = (IFlySpeechError*) HEAP[@([args[@"error"] integerValue])];
      
          // ref
          id<IFlyVoiceWakeuperDelegate> ref = (id<IFlyVoiceWakeuperDelegate>) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyVoiceWakeuperDelegate@%@::onCompleted(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onCompleted : error];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlyVoiceWakeuperDelegate::onVolumeChanged": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          int volume = [args[@"volume"] intValue];
      
          // ref
          id<IFlyVoiceWakeuperDelegate> ref = (id<IFlyVoiceWakeuperDelegate>) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlyVoiceWakeuperDelegate@%@::onVolumeChanged(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref onVolumeChanged : volume];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechSynthesizer::sharedInstance": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechSynthesizer::sharedInstance(暂未实现参数打印)");
          }
      
          // invoke native method
          IFlySpeechSynthesizer* result = [IFlySpeechSynthesizer sharedInstance];
      
          // result
          // return a ref
          HEAP[@((result).hash)] = result;
          methodResult(@((result).hash));
      },
      @"IFlySpeechSynthesizer::destroy": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
      
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechSynthesizer::destroy(暂未实现参数打印)");
          }
      
          // invoke native method
          BOOL result = [IFlySpeechSynthesizer destroy];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlySpeechSynthesizer::setParameterForKey": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* value = (NSString*) args[@"value"];
          // jsonable arg
          NSString* key = (NSString*) args[@"key"];
      
          // ref
          IFlySpeechSynthesizer* ref = (IFlySpeechSynthesizer*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechSynthesizer@%@::setParameter(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          BOOL result = [ref setParameter: value forKey: key];
      
          // result
          // 返回值: Value
          methodResult(@(result));
      },
      @"IFlySpeechSynthesizer::parameterForKey": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* key = (NSString*) args[@"key"];
      
          // ref
          IFlySpeechSynthesizer* ref = (IFlySpeechSynthesizer*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechSynthesizer@%@::parameterForKey(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          NSString* result = [ref parameterForKey: key];
      
          // result
          // 返回值: jsonable
          methodResult(result);
      },
      @"IFlySpeechSynthesizer::startSpeaking": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* text = (NSString*) args[@"text"];
      
          // ref
          IFlySpeechSynthesizer* ref = (IFlySpeechSynthesizer*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechSynthesizer@%@::startSpeaking(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref startSpeaking : text];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechSynthesizer::synthesizeToUri": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
          // jsonable arg
          NSString* text = (NSString*) args[@"text"];
          // jsonable arg
          NSString* uri = (NSString*) args[@"uri"];
      
          // ref
          IFlySpeechSynthesizer* ref = (IFlySpeechSynthesizer*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechSynthesizer@%@::synthesize(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref synthesize : text toUri: uri];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechSynthesizer::pauseSpeaking": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          IFlySpeechSynthesizer* ref = (IFlySpeechSynthesizer*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechSynthesizer@%@::pauseSpeaking(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref pauseSpeaking ];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechSynthesizer::resumeSpeaking": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          IFlySpeechSynthesizer* ref = (IFlySpeechSynthesizer*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechSynthesizer@%@::resumeSpeaking(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref resumeSpeaking ];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechSynthesizer::stopSpeaking": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // args
      
      
          // ref
          IFlySpeechSynthesizer* ref = (IFlySpeechSynthesizer*) HEAP[(NSNumber*) args[@"refId"]];
      
          // print log
          if (enableLog) {
              NSLog(@"fluttify-objc: IFlySpeechSynthesizer@%@::stopSpeaking(暂未实现参数打印)", args[@"refId"]);
          }
      
          // invoke native method
          [ref stopSpeaking ];
      
          // result
          // 无返回值
          methodResult(@"success");
      },
      @"IFlySpeechRecognizer::get_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"IFlySpeechRecognizer::get_delegate");
          }
      
          // ref object
          IFlySpeechRecognizer* ref = (IFlySpeechRecognizer*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          id<IFlySpeechRecognizerDelegate> result = ref.delegate;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          methodResult(@((result).hash));
      },
      
      @"IFlySpeechRecognizer::get_isListening": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"IFlySpeechRecognizer::get_isListening");
          }
      
          // ref object
          IFlySpeechRecognizer* ref = (IFlySpeechRecognizer*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          BOOL result = ref.isListening;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"IFlyVoiceWakeuper::get_isListening": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"IFlyVoiceWakeuper::get_isListening");
          }
      
          // ref object
          IFlyVoiceWakeuper* ref = (IFlyVoiceWakeuper*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          BOOL result = ref.isListening;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"IFlySpeechUnderstander::get_isUnderstanding": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"IFlySpeechUnderstander::get_isUnderstanding");
          }
      
          // ref object
          IFlySpeechUnderstander* ref = (IFlySpeechUnderstander*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          BOOL result = ref.isUnderstanding;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"IFlySpeechUnderstander::get_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"IFlySpeechUnderstander::get_delegate");
          }
      
          // ref object
          IFlySpeechUnderstander* ref = (IFlySpeechUnderstander*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          id<IFlySpeechRecognizerDelegate> result = ref.delegate;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          methodResult(@((result).hash));
      },
      
      @"IFlyDataUploader::get_dataName": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"IFlyDataUploader::get_dataName");
          }
      
          // ref object
          IFlyDataUploader* ref = (IFlyDataUploader*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          NSString* result = ref.dataName;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"IFlyDataUploader::get_data": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"IFlyDataUploader::get_data");
          }
      
          // ref object
          IFlyDataUploader* ref = (IFlyDataUploader*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          NSString* result = ref.data;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"IFlySpeechError::get_errorCode": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"IFlySpeechError::get_errorCode");
          }
      
          // ref object
          IFlySpeechError* ref = (IFlySpeechError*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          int result = ref.errorCode;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"IFlySpeechError::get_errorType": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"IFlySpeechError::get_errorType");
          }
      
          // ref object
          IFlySpeechError* ref = (IFlySpeechError*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          int result = ref.errorType;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"IFlySpeechError::get_errorDesc": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"IFlySpeechError::get_errorDesc");
          }
      
          // ref object
          IFlySpeechError* ref = (IFlySpeechError*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          NSString* result = ref.errorDesc;
      
          // 返回值: jsonable
          methodResult(result);
      },
      
      @"IFlySpeechUtility::get_engineMode": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"IFlySpeechUtility::get_engineMode");
          }
      
          // ref object
          IFlySpeechUtility* ref = (IFlySpeechUtility*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          IFlyEngineMode result = ref.engineMode;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"IFlySpeechEvaluator::get_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"IFlySpeechEvaluator::get_delegate");
          }
      
          // ref object
          IFlySpeechEvaluator* ref = (IFlySpeechEvaluator*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          id<IFlySpeechEvaluatorDelegate> result = ref.delegate;
      
          // return a ref
          HEAP[@((result).hash)] = result;
          methodResult(@((result).hash));
      },
      
      @"IFlySpeechSynthesizer::get_isSpeaking": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"IFlySpeechSynthesizer::get_isSpeaking");
          }
      
          // ref object
          IFlySpeechSynthesizer* ref = (IFlySpeechSynthesizer*) HEAP[(NSNumber*) args[@"refId"]];
      
          // invoke native method
          BOOL result = ref.isSpeaking;
      
          // 返回值: Value
          methodResult(@(result));
      },
      
      @"IFlySpeechRecognizer::set_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"IFlySpeechRecognizer::set_delegate");
          }
      
          // args
          // ref arg
          id<IFlySpeechRecognizerDelegate> delegate = (id<IFlySpeechRecognizerDelegate>) HEAP[@([args[@"delegate"] integerValue])];
      
          // ref
          IFlySpeechRecognizer* ref = (IFlySpeechRecognizer*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.delegate = delegate;
          methodResult(@"success");
      },
      
      @"IFlyRecognizerView::set_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"IFlyRecognizerView::set_delegate");
          }
      
          // args
      
      
          // ref
          IFlyRecognizerView* ref = (IFlyRecognizerView*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.delegate = self;
          methodResult(@"success");
      },
      
      @"IFlyVoiceWakeuper::set_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"IFlyVoiceWakeuper::set_delegate");
          }
      
          // args
      
      
          // ref
          IFlyVoiceWakeuper* ref = (IFlyVoiceWakeuper*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.delegate = self;
          methodResult(@"success");
      },
      
      @"IFlySpeechUnderstander::set_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"IFlySpeechUnderstander::set_delegate");
          }
      
          // args
          // ref arg
          id<IFlySpeechRecognizerDelegate> delegate = (id<IFlySpeechRecognizerDelegate>) HEAP[@([args[@"delegate"] integerValue])];
      
          // ref
          IFlySpeechUnderstander* ref = (IFlySpeechUnderstander*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.delegate = delegate;
          methodResult(@"success");
      },
      
      @"IFlyDataUploader::set_dataName": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"IFlyDataUploader::set_dataName");
          }
      
          // args
          // jsonable arg
          NSString* dataName = (NSString*) args[@"dataName"];
      
          // ref
          IFlyDataUploader* ref = (IFlyDataUploader*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.dataName = dataName;
          methodResult(@"success");
      },
      
      @"IFlyDataUploader::set_data": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"IFlyDataUploader::set_data");
          }
      
          // args
          // jsonable arg
          NSString* data = (NSString*) args[@"data"];
      
          // ref
          IFlyDataUploader* ref = (IFlyDataUploader*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.data = data;
          methodResult(@"success");
      },
      
      @"IFlySpeechError::set_errorCode": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"IFlySpeechError::set_errorCode");
          }
      
          // args
          // jsonable arg
          int errorCode = [args[@"errorCode"] intValue];
      
          // ref
          IFlySpeechError* ref = (IFlySpeechError*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.errorCode = errorCode;
          methodResult(@"success");
      },
      
      @"IFlySpeechError::set_errorType": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"IFlySpeechError::set_errorType");
          }
      
          // args
          // jsonable arg
          int errorType = [args[@"errorType"] intValue];
      
          // ref
          IFlySpeechError* ref = (IFlySpeechError*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.errorType = errorType;
          methodResult(@"success");
      },
      
      @"IFlySpeechError::set_errorDesc": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"IFlySpeechError::set_errorDesc");
          }
      
          // args
          // jsonable arg
          NSString* errorDesc = (NSString*) args[@"errorDesc"];
      
          // ref
          IFlySpeechError* ref = (IFlySpeechError*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.errorDesc = errorDesc;
          methodResult(@"success");
      },
      
      @"IFlySpeechUtility::set_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"IFlySpeechUtility::set_delegate");
          }
      
          // args
      
      
          // ref
          IFlySpeechUtility* ref = (IFlySpeechUtility*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.delegate = self;
          methodResult(@"success");
      },
      
      @"IFlySpeechEvaluator::set_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"IFlySpeechEvaluator::set_delegate");
          }
      
          // args
          // ref arg
          id<IFlySpeechEvaluatorDelegate> delegate = (id<IFlySpeechEvaluatorDelegate>) HEAP[@([args[@"delegate"] integerValue])];
      
          // ref
          IFlySpeechEvaluator* ref = (IFlySpeechEvaluator*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.delegate = delegate;
          methodResult(@"success");
      },
      
      @"IFlyISVRecognizer::set_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"IFlyISVRecognizer::set_delegate");
          }
      
          // args
      
      
          // ref
          IFlyISVRecognizer* ref = (IFlyISVRecognizer*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.delegate = self;
          methodResult(@"success");
      },
      
      @"IFlySpeechSynthesizer::set_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"IFlySpeechSynthesizer::set_delegate");
          }
      
          // args
      
      
          // ref
          IFlySpeechSynthesizer* ref = (IFlySpeechSynthesizer*) HEAP[(NSNumber*) args[@"refId"]];
      
          ref.delegate = self;
          methodResult(@"success");
      },
      
      @"RefClass::isKindOfIFlySpeechRecognizer": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[IFlySpeechRecognizer class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfIFlySetting": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[IFlySetting class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfIFlyRecognizerView": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[IFlyRecognizerView class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfIFlyVoiceWakeuper": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[IFlyVoiceWakeuper class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfIFlySpeechConstant": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[IFlySpeechConstant class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfIFlySpeechUnderstander": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[IFlySpeechUnderstander class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfIFlyDebugLog": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[IFlyDebugLog class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfIFlyDataUploader": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[IFlyDataUploader class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfIFlyAudioSession": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[IFlyAudioSession class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfIFlyUserWords": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[IFlyUserWords class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfIFlyTextUnderstander": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[IFlyTextUnderstander class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfIFlySpeechError": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[IFlySpeechError class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfIFlyResourceUtil": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[IFlyResourceUtil class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfIFlySpeechUtility": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[IFlySpeechUtility class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfIFlySpeechEvaluator": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[IFlySpeechEvaluator class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfIFlyVerifierUtil": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[IFlyVerifierUtil class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfIFlyISVRecognizer": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[IFlyISVRecognizer class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::isKindOfIFlySpeechSynthesizer": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          BOOL isTargetType = [ref isKindOfClass:[IFlySpeechSynthesizer class]];
          methodResult(@(isTargetType));
      },
      
      @"RefClass::asIFlySpeechRecognizer": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (IFlySpeechRecognizer *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asIFlySetting": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (IFlySetting *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asIFlyRecognizerView": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (IFlyRecognizerView *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asIFlyVoiceWakeuper": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (IFlyVoiceWakeuper *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asIFlySpeechConstant": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (IFlySpeechConstant *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asIFlySpeechUnderstander": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (IFlySpeechUnderstander *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asIFlyDebugLog": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (IFlyDebugLog *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asIFlyDataUploader": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (IFlyDataUploader *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asIFlyAudioSession": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (IFlyAudioSession *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asIFlyUserWords": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (IFlyUserWords *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asIFlyTextUnderstander": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (IFlyTextUnderstander *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asIFlySpeechError": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (IFlySpeechError *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asIFlyResourceUtil": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (IFlyResourceUtil *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asIFlySpeechUtility": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (IFlySpeechUtility *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asIFlySpeechEvaluator": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (IFlySpeechEvaluator *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asIFlyVerifierUtil": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (IFlyVerifierUtil *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asIFlyISVRecognizer": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (IFlyISVRecognizer *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"RefClass::asIFlySpeechSynthesizer": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // 引用对象
          NSInteger refId = [args[@"refId"] integerValue];
          id ref = HEAP[@(refId)];
      
          // 转型
          ref = (IFlySpeechSynthesizer *) ref;
          // 放回HEAP
          HEAP[@(refId)] = ref;
      
          methodResult(@(refId));
      },
      
      @"ObjectFactory::createIFlySpeechRecognizer": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createIFlySpeechRecognizer");
          }
      
          IFlySpeechRecognizer* ref = [[IFlySpeechRecognizer alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createIFlySetting": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createIFlySetting");
          }
      
          IFlySetting* ref = [[IFlySetting alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createIFlyRecognizerView": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createIFlyRecognizerView");
          }
      
          IFlyRecognizerView* ref = [[IFlyRecognizerView alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createIFlyVoiceWakeuper": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createIFlyVoiceWakeuper");
          }
      
          IFlyVoiceWakeuper* ref = [[IFlyVoiceWakeuper alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createIFlySpeechConstant": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createIFlySpeechConstant");
          }
      
          IFlySpeechConstant* ref = [[IFlySpeechConstant alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createIFlySpeechUnderstander": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createIFlySpeechUnderstander");
          }
      
          IFlySpeechUnderstander* ref = [[IFlySpeechUnderstander alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createIFlyDebugLog": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createIFlyDebugLog");
          }
      
          IFlyDebugLog* ref = [[IFlyDebugLog alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createIFlyDataUploader": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createIFlyDataUploader");
          }
      
          IFlyDataUploader* ref = [[IFlyDataUploader alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createIFlyAudioSession": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createIFlyAudioSession");
          }
      
          IFlyAudioSession* ref = [[IFlyAudioSession alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createIFlyUserWords": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createIFlyUserWords");
          }
      
          IFlyUserWords* ref = [[IFlyUserWords alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createIFlyTextUnderstander": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createIFlyTextUnderstander");
          }
      
          IFlyTextUnderstander* ref = [[IFlyTextUnderstander alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createIFlySpeechError": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createIFlySpeechError");
          }
      
          IFlySpeechError* ref = [[IFlySpeechError alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createIFlyResourceUtil": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createIFlyResourceUtil");
          }
      
          IFlyResourceUtil* ref = [[IFlyResourceUtil alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createIFlySpeechUtility": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createIFlySpeechUtility");
          }
      
          IFlySpeechUtility* ref = [[IFlySpeechUtility alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createIFlySpeechEvaluator": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createIFlySpeechEvaluator");
          }
      
          IFlySpeechEvaluator* ref = [[IFlySpeechEvaluator alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createIFlyVerifierUtil": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createIFlyVerifierUtil");
          }
      
          IFlyVerifierUtil* ref = [[IFlyVerifierUtil alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createIFlyISVRecognizer": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createIFlyISVRecognizer");
          }
      
          IFlyISVRecognizer* ref = [[IFlyISVRecognizer alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
      @"ObjectFactory::createIFlySpeechSynthesizer": ^(NSObject <FlutterPluginRegistrar> * registrar, NSDictionary<NSString *, id> * args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"ObjectFactory::createIFlySpeechSynthesizer");
          }
      
          IFlySpeechSynthesizer* ref = [[IFlySpeechSynthesizer alloc] init];
          HEAP[@(ref.hash)] = ref;
      
          methodResult(@(ref.hash));
      
          if (enableLog) NSLog(@"HEAP: %@", HEAP);
      },
      
    };
  }

  return self;
}

+ (void)registerWithRegistrar:(NSObject <FlutterPluginRegistrar> *)registrar {
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"com.fluttify/xfiat_fluttify"
            binaryMessenger:[registrar messenger]];

  [registrar addMethodCallDelegate:[[XfiatFluttifyPlugin alloc] initWithFlutterPluginRegistrar:registrar]
                           channel:channel];

  // 注册View
  [registrar registerViewFactory: [[IFlyRecognizerViewFactory alloc] initWithRegistrar:registrar] withId: @"com.fluttify/IFlyRecognizerView"];
}

// Method Handlers
- (void)handleMethodCall:(FlutterMethodCall *)methodCall result:(FlutterResult)methodResult {
  NSDictionary<NSString *, id> *args = (NSDictionary<NSString *, id> *) [methodCall arguments];

  if (_handlerMap[methodCall.method] != nil) {
    _handlerMap[methodCall.method](_registrar, args, methodResult);
  } else {
    methodResult(FlutterMethodNotImplemented);
  }
}

// 委托方法们
- (void)onCompleted : (IFlySpeechError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlySpeechSynthesizerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlySpeechSynthesizerDelegate::onCompleted");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argerror = @(error.hash);
  HEAP[argerror] = error;

  [channel invokeMethod:@"Callback::IFlySpeechSynthesizerDelegate::onCompleted" arguments:@{@"error": argerror}];
  
}

- (void)onSpeakBegin 
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlySpeechSynthesizerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlySpeechSynthesizerDelegate::onSpeakBegin");
  }

  // convert to jsonable arg
  

  [channel invokeMethod:@"Callback::IFlySpeechSynthesizerDelegate::onSpeakBegin" arguments:@{}];
  
}

- (void)onBufferProgress : (int)progress message: (NSString*)msg
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlySpeechSynthesizerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlySpeechSynthesizerDelegate::onBufferProgressMessage");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argprogress = @(progress);
  // jsonable callback arg
  NSString* argmsg = msg;

  [channel invokeMethod:@"Callback::IFlySpeechSynthesizerDelegate::onBufferProgressMessage" arguments:@{@"progress": argprogress, @"msg": argmsg}];
  
}

- (void)onSpeakProgress : (int)progress beginPos: (int)beginPos endPos: (int)endPos
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlySpeechSynthesizerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlySpeechSynthesizerDelegate::onSpeakProgressBeginPosendPos");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argprogress = @(progress);
  // primitive callback arg
  NSNumber* argbeginPos = @(beginPos);
  // primitive callback arg
  NSNumber* argendPos = @(endPos);

  [channel invokeMethod:@"Callback::IFlySpeechSynthesizerDelegate::onSpeakProgressBeginPosendPos" arguments:@{@"progress": argprogress, @"beginPos": argbeginPos, @"endPos": argendPos}];
  
}

- (void)onSpeakPaused 
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlySpeechSynthesizerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlySpeechSynthesizerDelegate::onSpeakPaused");
  }

  // convert to jsonable arg
  

  [channel invokeMethod:@"Callback::IFlySpeechSynthesizerDelegate::onSpeakPaused" arguments:@{}];
  
}

- (void)onSpeakResumed 
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlySpeechSynthesizerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlySpeechSynthesizerDelegate::onSpeakResumed");
  }

  // convert to jsonable arg
  

  [channel invokeMethod:@"Callback::IFlySpeechSynthesizerDelegate::onSpeakResumed" arguments:@{}];
  
}

- (void)onSpeakCancel 
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlySpeechSynthesizerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlySpeechSynthesizerDelegate::onSpeakCancel");
  }

  // convert to jsonable arg
  

  [channel invokeMethod:@"Callback::IFlySpeechSynthesizerDelegate::onSpeakCancel" arguments:@{}];
  
}

- (void)onEvent : (int)eventType arg0: (int)arg0 arg1: (int)arg1 data: (NSData*)eventData
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlySpeechSynthesizerDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlySpeechSynthesizerDelegate::onEventArg0arg1data");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argeventType = @(eventType);
  // primitive callback arg
  NSNumber* argarg0 = @(arg0);
  // primitive callback arg
  NSNumber* argarg1 = @(arg1);
  // ref callback arg
  NSNumber* argeventData = @(eventData.hash);
  HEAP[argeventData] = eventData;

  [channel invokeMethod:@"Callback::IFlySpeechSynthesizerDelegate::onEventArg0arg1data" arguments:@{@"eventType": argeventType, @"arg0": argarg0, @"arg1": argarg1, @"eventData": argeventData}];
  
}

- (void)onResult : (NSArray*)resultArray isLast: (BOOL)isLast
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlyRecognizerViewDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlyRecognizerViewDelegate::onResultIsLast");
  }

  // convert to jsonable arg
  // list callback arg
  NSMutableArray<NSNumber*>* argresultArray = [NSMutableArray arrayWithCapacity:resultArray.count];
  for (int i = 0; i < resultArray.count; i++) {
      NSObject* item = ((NSObject*) [resultArray objectAtIndex:i]);
      // return to dart side data
      argresultArray[i] = @(item.hash);
      // add to HEAP
      HEAP[@(item.hash)] = item;
  }
  // primitive callback arg
  NSNumber* argisLast = @(isLast);

  [channel invokeMethod:@"Callback::IFlyRecognizerViewDelegate::onResultIsLast" arguments:@{@"resultArray": argresultArray, @"isLast": argisLast}];
  
}

- (void)onIFlyRecorderBuffer : (const void*)buffer bufferSize: (int)size
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlyPcmRecorderDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlyPcmRecorderDelegate::onIFlyRecorderBufferBufferSize");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argbuffer = @([NSValue valueWithPointer:buffer].hash);
  HEAP[argbuffer] = [NSValue valueWithPointer:buffer];
  // primitive callback arg
  NSNumber* argsize = @(size);

  [channel invokeMethod:@"Callback::IFlyPcmRecorderDelegate::onIFlyRecorderBufferBufferSize" arguments:@{@"buffer": argbuffer, @"size": argsize}];
  
}

- (void)onIFlyRecorderError : (IFlyPcmRecorder*)recoder theError: (int)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlyPcmRecorderDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlyPcmRecorderDelegate::onIFlyRecorderErrorTheError");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argrecoder = @(recoder.hash);
  HEAP[argrecoder] = recoder;
  // primitive callback arg
  NSNumber* argerror = @(error);

  [channel invokeMethod:@"Callback::IFlyPcmRecorderDelegate::onIFlyRecorderErrorTheError" arguments:@{@"recoder": argrecoder, @"error": argerror}];
  
}

- (void)onIFlyRecorderVolumeChanged : (int)power
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlyPcmRecorderDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlyPcmRecorderDelegate::onIFlyRecorderVolumeChanged");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argpower = @(power);

  [channel invokeMethod:@"Callback::IFlyPcmRecorderDelegate::onIFlyRecorderVolumeChanged" arguments:@{@"power": argpower}];
  
}

- (void)onResults : (IFlyIdentityResult*)results isLast: (BOOL)isLast
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlyIdentityVerifierDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlyIdentityVerifierDelegate::onResultsIsLast");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argresults = @(results.hash);
  HEAP[argresults] = results;
  // primitive callback arg
  NSNumber* argisLast = @(isLast);

  [channel invokeMethod:@"Callback::IFlyIdentityVerifierDelegate::onResultsIsLast" arguments:@{@"results": argresults, @"isLast": argisLast}];
  
}

- (void)onEvent : (int)eventType arg1: (int)arg1 arg2: (int)arg2 extra: (id)obj
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlyIdentityVerifierDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlyIdentityVerifierDelegate::onEventArg1arg2extra");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argeventType = @(eventType);
  // primitive callback arg
  NSNumber* argarg1 = @(arg1);
  // primitive callback arg
  NSNumber* argarg2 = @(arg2);
  // ref callback arg
  NSNumber* argobj = @(((NSObject*) obj).hash);
  HEAP[argobj] = ((NSObject*) obj);

  [channel invokeMethod:@"Callback::IFlyIdentityVerifierDelegate::onEventArg1arg2extra" arguments:@{@"eventType": argeventType, @"arg1": argarg1, @"arg2": argarg2, @"obj": argobj}];
  
}

- (void)onResult : (NSDictionary*)dic
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlyISVDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlyISVDelegate::onResult");
  }

  // convert to jsonable arg
  // ref callback arg
  NSNumber* argdic = @(dic.hash);
  HEAP[argdic] = dic;

  [channel invokeMethod:@"Callback::IFlyISVDelegate::onResult" arguments:@{@"dic": argdic}];
  
}

- (void)onRecognition 
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlyISVDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlyISVDelegate::onRecognition");
  }

  // convert to jsonable arg
  

  [channel invokeMethod:@"Callback::IFlyISVDelegate::onRecognition" arguments:@{}];
  
}

- (void)onVolumeChanged : (int)volume
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlyISVDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlyISVDelegate::onVolumeChanged");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argvolume = @(volume);

  [channel invokeMethod:@"Callback::IFlyISVDelegate::onVolumeChanged" arguments:@{@"volume": argvolume}];
  
}

- (void)onBeginOfSpeech 
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlyVoiceWakeuperDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlyVoiceWakeuperDelegate::onBeginOfSpeech");
  }

  // convert to jsonable arg
  

  [channel invokeMethod:@"Callback::IFlyVoiceWakeuperDelegate::onBeginOfSpeech" arguments:@{}];
  
}

- (void)onEndOfSpeech 
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlyVoiceWakeuperDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlyVoiceWakeuperDelegate::onEndOfSpeech");
  }

  // convert to jsonable arg
  

  [channel invokeMethod:@"Callback::IFlyVoiceWakeuperDelegate::onEndOfSpeech" arguments:@{}];
  
}

- (void)onEvent : (int)eventType isLast: (BOOL)isLast arg1: (int)arg1 data: (NSMutableDictionary*)eventData
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
      methodChannelWithName:@"IFlyVoiceWakeuperDelegate::Callback"
            binaryMessenger:[_registrar messenger]];
  // print log
  if (enableLog) {
    NSLog(@"IFlyVoiceWakeuperDelegate::onEventIsLastarg1data");
  }

  // convert to jsonable arg
  // primitive callback arg
  NSNumber* argeventType = @(eventType);
  // primitive callback arg
  NSNumber* argisLast = @(isLast);
  // primitive callback arg
  NSNumber* argarg1 = @(arg1);
  // ref callback arg
  NSNumber* argeventData = @(eventData.hash);
  HEAP[argeventData] = eventData;

  [channel invokeMethod:@"Callback::IFlyVoiceWakeuperDelegate::onEventIsLastarg1data" arguments:@{@"eventType": argeventType, @"isLast": argisLast, @"arg1": argarg1, @"eventData": argeventData}];
  
}


@end